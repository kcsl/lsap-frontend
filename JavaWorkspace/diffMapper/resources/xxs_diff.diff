diff --git a/drivers/block/drbd/drbd_bitmap.c b/drivers/block/drbd/drbd_bitmap.c
index 426c97aef900..67ffcd4c2cea 100644
--- a/drivers/block/drbd/drbd_bitmap.c
+++ b/drivers/block/drbd/drbd_bitmap.c
@@ -136,6 +136,7 @@ void drbd_bm_lock(struct drbd_device *device, char *why, enum bm_flag flags)
 		return;
 	}
 
+	/* 1ebab55@@@DEADLOCK@@@4651@@@47@@@drivers/block/drbd/drbd_bitmap.c@@@bm_change */
 	trylock_failed = !mutex_trylock(&b->bm_change);
 
 	if (trylock_failed) {
diff --git a/drivers/block/drbd/drbd_state.c b/drivers/block/drbd/drbd_state.c
index c35c0f001bb7..e7cd834f9551 100644
--- a/drivers/block/drbd/drbd_state.c
+++ b/drivers/block/drbd/drbd_state.c
@@ -329,6 +329,9 @@ drbd_req_state(struct drbd_device *device, union drbd_state mask,
 	init_completion(&done);
 
 	if (f & CS_SERIALIZE)
+		/* 1f2641a@@@DEADLOCK@@@9427@@@32@@@drivers/block/drbd/drbd_state.c@@@cstate_mutex */
+		/* 1f2641a@@@DEADLOCK@@@9427@@@32@@@drivers/block/drbd/drbd_state.c@@@own_state_mutex */
+		/* 1f2641a@@@DEADLOCK@@@9427@@@32@@@drivers/block/drbd/drbd_state.c@@@state_mutex */
 		mutex_lock(device->state_mutex);
 
 	spin_lock_irqsave(&device->resource->req_lock, flags);
diff --git a/drivers/block/nbd.c b/drivers/block/nbd.c
index fb31b8ee4372..e7731484a596 100644
--- a/drivers/block/nbd.c
+++ b/drivers/block/nbd.c
@@ -128,6 +128,7 @@ static void sock_shutdown(struct nbd_device *nbd, int lock)
 	 * there should be a more generic interface rather than
 	 * calling socket ops directly here */
 	if (lock)
+		/* 1ff2d28@@@DEADLOCK@@@3652@@@26@@@drivers/block/nbd.c@@@tx_lock */
 		mutex_lock(&nbd->tx_lock);
 	if (nbd->sock) {
 		dev_warn(disk_to_dev(nbd->disk), "shutting down socket\n");
diff --git a/drivers/input/mousedev.c b/drivers/input/mousedev.c
index b604564dec5c..25abe64726e3 100644
--- a/drivers/input/mousedev.c
+++ b/drivers/input/mousedev.c
@@ -423,6 +423,7 @@ static int mousedev_open_device(struct mousedev *mousedev)
 {
 	int retval;
 
+	/* 11d65bb@@@DEADLOCK@@@10039@@@52@@@drivers/input/mousedev.c@@@mutex */
 	retval = mutex_lock_interruptible(&mousedev->mutex);
 	if (retval)
 		return retval;
@@ -458,6 +459,7 @@ static int mixdev_open_devices(struct mousedev *mixdev)
 {
 	int error;
 
+	/* 11d65dc@@@DEADLOCK@@@10780@@@49@@@drivers/input/mousedev.c@@@mutex */
 	error = mutex_lock_interruptible(&mixdev->mutex);
 	if (error)
 		return error;
@@ -939,6 +941,7 @@ static int mixdev_add_device(struct mousedev *mousedev)
 {
 	int retval;
 
+	/* 11d68db@@@DEADLOCK@@@22157@@@56@@@drivers/input/mousedev.c@@@mutex */
 	retval = mutex_lock_interruptible(&mousedev_mix->mutex);
 	if (retval)
 		return retval;
diff --git a/drivers/media/rc/lirc_dev.c b/drivers/media/rc/lirc_dev.c
index dc5cbffcd5a2..db0ac2b6d173 100644
--- a/drivers/media/rc/lirc_dev.c
+++ b/drivers/media/rc/lirc_dev.c
@@ -723,6 +723,7 @@ ssize_t lirc_dev_fop_read(struct file *file,
 			schedule();
 			set_current_state(TASK_INTERRUPTIBLE);
 
+			if (/* 1ab60aa@@@DEADLOCK@@@16145@@@41@@@drivers/media/rc/lirc_dev.c@@@irctl_lock */
 			if (mutex_lock_interruptible(&ir->irctl_lock)) {
 				ret = -ERESTARTSYS;
 				remove_wait_queue(&ir->buf->wait_poll, &wait);
diff --git a/drivers/media/usb/gspca/gspca.c b/drivers/media/usb/gspca/gspca.c
index e8cf23c91cef..c200bd8012e1 100644
--- a/drivers/media/usb/gspca/gspca.c
+++ b/drivers/media/usb/gspca/gspca.c
@@ -1711,6 +1711,7 @@ static int vidioc_dqbuf(struct file *file, void *priv,
 		if (ret == 0)
 			return -EIO;
 
+/* 10d3280@@@DEADLOCK@@@42298@@@48@@@drivers/media/usb/gspca/gspca.c@@@queue_lock */
 		if (mutex_lock_interruptible(&gspca_dev->queue_lock))
 			return -ERESTARTSYS;
 	}
diff --git a/drivers/media/usb/pvrusb2/pvrusb2-ctrl.c b/drivers/media/usb/pvrusb2/pvrusb2-ctrl.c
index 7d5a7139a45a..0b82d67636c3 100644
--- a/drivers/media/usb/pvrusb2/pvrusb2-ctrl.c
+++ b/drivers/media/usb/pvrusb2/pvrusb2-ctrl.c
@@ -61,6 +61,7 @@ int pvr2_ctrl_set_mask_value(struct pvr2_ctrl *cptr,int mask,int val)
 {
 	int ret = 0;
 	if (!cptr) return -EINVAL;
+	/* 1e16f13@@@DEADLOCK@@@1847@@@30@@@drivers/media/usb/pvrusb2/pvrusb2-ctrl.c@@@big_lock_mutex */
 	LOCK_TAKE(cptr->hdw->big_lock); do {
 		if (cptr->info->set_value) {
 			if (cptr->info->type == pvr2_ctl_bitmask) {
@@ -86,6 +87,7 @@ int pvr2_ctrl_get_value(struct pvr2_ctrl *cptr,int *valptr)
 {
 	int ret = 0;
 	if (!cptr) return -EINVAL;
+	/* 1e16f5b@@@DEADLOCK@@@2542@@@30@@@drivers/media/usb/pvrusb2/pvrusb2-ctrl.c@@@big_lock_mutex */
 	LOCK_TAKE(cptr->hdw->big_lock); do {
 		ret = cptr->info->get_value(cptr,valptr);
 	} while(0); LOCK_GIVE(cptr->hdw->big_lock);
@@ -106,6 +108,7 @@ int pvr2_ctrl_get_max(struct pvr2_ctrl *cptr)
 {
 	int ret = 0;
 	if (!cptr) return 0;
+	/* 132f1e0@@@DEADLOCK@@@2977@@@30@@@drivers/media/usb/pvrusb2/pvrusb2-ctrl.c@@@big_lock_mutex */
 	LOCK_TAKE(cptr->hdw->big_lock); do {
 		if (cptr->info->get_max_value) {
 			cptr->info->get_max_value(cptr,&ret);
@@ -122,6 +125,7 @@ int pvr2_ctrl_get_min(struct pvr2_ctrl *cptr)
 {
 	int ret = 0;
 	if (!cptr) return 0;
+	/* 1e16fb7@@@DEADLOCK@@@3385@@@30@@@drivers/media/usb/pvrusb2/pvrusb2-ctrl.c@@@big_lock_mutex */
 	LOCK_TAKE(cptr->hdw->big_lock); do {
 		if (cptr->info->get_min_value) {
 			cptr->info->get_min_value(cptr,&ret);
@@ -138,6 +142,7 @@ int pvr2_ctrl_get_def(struct pvr2_ctrl *cptr, int *valptr)
 {
 	int ret = 0;
 	if (!cptr) return -EINVAL;
+	/* 1e16feb@@@DEADLOCK@@@3812@@@30@@@drivers/media/usb/pvrusb2/pvrusb2-ctrl.c@@@big_lock_mutex */
 	LOCK_TAKE(cptr->hdw->big_lock); do {
 		if (cptr->info->get_def_value) {
 			ret = cptr->info->get_def_value(cptr, valptr);
@@ -154,6 +159,7 @@ int pvr2_ctrl_get_cnt(struct pvr2_ctrl *cptr)
 {
 	int ret = 0;
 	if (!cptr) return 0;
+	/* 1e17018@@@DEADLOCK@@@4191@@@30@@@drivers/media/usb/pvrusb2/pvrusb2-ctrl.c@@@big_lock_mutex */
 	LOCK_TAKE(cptr->hdw->big_lock); do {
 		if (cptr->info->type == pvr2_ctl_enum) {
 			ret = cptr->info->def.type_enum.count;
@@ -168,6 +174,7 @@ int pvr2_ctrl_get_mask(struct pvr2_ctrl *cptr)
 {
 	int ret = 0;
 	if (!cptr) return 0;
+	/* 132f318@@@DEADLOCK@@@4522@@@30@@@drivers/media/usb/pvrusb2/pvrusb2-ctrl.c@@@big_lock_mutex */
 	LOCK_TAKE(cptr->hdw->big_lock); do {
 		if (cptr->info->type == pvr2_ctl_bitmask) {
 			ret = cptr->info->def.type_bitmask.valid_bits;
@@ -201,6 +208,7 @@ int pvr2_ctrl_get_valname(struct pvr2_ctrl *cptr,int val,
 	int ret = -EINVAL;
 	if (!cptr) return 0;
 	*blen = 0;
+	/* 1e17081@@@DEADLOCK@@@5243@@@30@@@drivers/media/usb/pvrusb2/pvrusb2-ctrl.c@@@big_lock_mutex */
 	LOCK_TAKE(cptr->hdw->big_lock); do {
 		if (cptr->info->type == pvr2_ctl_enum) {
 			const char * const *names;
@@ -507,6 +515,7 @@ int pvr2_ctrl_sym_to_value(struct pvr2_ctrl *cptr,
 
 	if (!len) return -EINVAL;
 
+	/* 1e172dc@@@DEADLOCK@@@11580@@@30@@@drivers/media/usb/pvrusb2/pvrusb2-ctrl.c@@@big_lock_mutex */
 	LOCK_TAKE(cptr->hdw->big_lock); do {
 		if (cptr->info->type == pvr2_ctl_int) {
 			ret = parse_token(ptr,len,valptr,NULL,0);
@@ -590,6 +599,7 @@ int pvr2_ctrl_value_to_sym(struct pvr2_ctrl *cptr,
 			   unsigned int *len)
 {
 	int ret;
+	/* 1e1735b@@@DEADLOCK@@@13783@@@30@@@drivers/media/usb/pvrusb2/pvrusb2-ctrl.c@@@big_lock_mutex */
 	LOCK_TAKE(cptr->hdw->big_lock); do {
 		ret = pvr2_ctrl_value_to_sym_internal(cptr,mask,val,
 						      buf,maxlen,len);
diff --git a/drivers/media/usb/pvrusb2/pvrusb2-encoder.c b/drivers/media/usb/pvrusb2/pvrusb2-encoder.c
index f7702aeeda3f..eded3a63eb33 100644
--- a/drivers/media/usb/pvrusb2/pvrusb2-encoder.c
+++ b/drivers/media/usb/pvrusb2/pvrusb2-encoder.c
@@ -206,6 +206,7 @@ static int pvr2_encoder_cmd(void *ctxt,
 	}
 
 
+	/* 1e20ff9@@@DEADLOCK@@@6027@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-encoder.c@@@ctl_lock_mutex */
 	LOCK_TAKE(hdw->ctl_lock); do {
 
 		if (!hdw->state_encoder_ok) {
diff --git a/drivers/media/usb/pvrusb2/pvrusb2-hdw.c b/drivers/media/usb/pvrusb2/pvrusb2-hdw.c
index 9623b6218214..755dcb679682 100644
--- a/drivers/media/usb/pvrusb2/pvrusb2-hdw.c
+++ b/drivers/media/usb/pvrusb2/pvrusb2-hdw.c
@@ -1719,6 +1719,7 @@ static int pvr2_hdw_untrip_unlocked(struct pvr2_hdw *hdw)
 int pvr2_hdw_untrip(struct pvr2_hdw *hdw)
 {
 	int fl;
+	/* 1e24126@@@DEADLOCK@@@46833@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@big_lock_mutex */
 	LOCK_TAKE(hdw->big_lock); do {
 		fl = pvr2_hdw_untrip_unlocked(hdw);
 	} while (0); LOCK_GIVE(hdw->big_lock);
@@ -1738,6 +1739,7 @@ int pvr2_hdw_get_streaming(struct pvr2_hdw *hdw)
 int pvr2_hdw_set_streaming(struct pvr2_hdw *hdw,int enable_flag)
 {
 	int ret,st;
+	/* 1345512@@@DEADLOCK@@@47169@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@big_lock_mutex */
 	LOCK_TAKE(hdw->big_lock); do {
 		pvr2_hdw_untrip_unlocked(hdw);
 		if ((!enable_flag) != !(hdw->state_pipeline_req)) {
@@ -1762,6 +1764,7 @@ int pvr2_hdw_set_streaming(struct pvr2_hdw *hdw,int enable_flag)
 int pvr2_hdw_set_stream_type(struct pvr2_hdw *hdw,enum pvr2_config config)
 {
 	int fl;
+	/* 1e24199@@@DEADLOCK@@@47855@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@big_lock_mutex */
 	LOCK_TAKE(hdw->big_lock);
 	if ((fl = (hdw->desired_stream_type != config)) != 0) {
 		hdw->desired_stream_type = config;
@@ -1820,6 +1823,7 @@ static int pvr2_hdw_check_firmware(struct pvr2_hdw *hdw)
 	   respond to this.  If this probe fails then likely the FX2
 	   firmware needs be loaded. */
 	int result;
+	/* 1e241f0@@@DEADLOCK@@@49240@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@ctl_lock_mutex */
 	LOCK_TAKE(hdw->ctl_lock); do {
 		hdw->cmd_buffer[0] = FX2CMD_GET_EEPROM_ADDR;
 		result = pvr2_send_request_ex(hdw,HZ*1,!0,
@@ -2358,6 +2362,7 @@ int pvr2_hdw_initialize(struct pvr2_hdw *hdw,
 			void (*callback_func)(void *),
 			void *callback_data)
 {
+	/* 1e24601@@@DEADLOCK@@@64084@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@big_lock_mutex */
 	LOCK_TAKE(hdw->big_lock); do {
 		if (hdw->flag_disconnected) {
 			/* Handle a race here: If we're already
@@ -2757,7 +2762,9 @@ int pvr2_hdw_dev_ok(struct pvr2_hdw *hdw)
 void pvr2_hdw_disconnect(struct pvr2_hdw *hdw)
 {
 	pvr2_trace(PVR2_TRACE_INIT,"pvr2_hdw_disconnect(hdw=%p)",hdw);
+	/* 13463bb@@@DEADLOCK@@@76492@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@big_lock_mutex */
 	LOCK_TAKE(hdw->big_lock);
+	/* 1e249f4@@@DEADLOCK@@@76519@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@ctl_lock_mutex */
 	LOCK_TAKE(hdw->ctl_lock);
 	pvr2_hdw_remove_usb_stuff(hdw);
 	LOCK_GIVE(hdw->ctl_lock);
@@ -3224,6 +3231,7 @@ static int pvr2_hdw_commit_execute(struct pvr2_hdw *hdw)
 int pvr2_hdw_commit_ctl(struct pvr2_hdw *hdw)
 {
 	int fl;
+	/* 1346bca@@@DEADLOCK@@@90119@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@big_lock_mutex */
 	LOCK_TAKE(hdw->big_lock);
 	fl = pvr2_hdw_commit_setup(hdw);
 	LOCK_GIVE(hdw->big_lock);
@@ -3236,6 +3244,7 @@ static void pvr2_hdw_worker_poll(struct work_struct *work)
 {
 	int fl = 0;
 	struct pvr2_hdw *hdw = container_of(work,struct pvr2_hdw,workpoll);
+	/* 1e24ef2@@@DEADLOCK@@@90404@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@big_lock_mutex */
 	LOCK_TAKE(hdw->big_lock); do {
 		fl = pvr2_hdw_state_eval(hdw);
 	} while (0); LOCK_GIVE(hdw->big_lock);
@@ -3276,6 +3285,7 @@ const char *pvr2_hdw_get_type(struct pvr2_hdw *hdw)
 int pvr2_hdw_is_hsm(struct pvr2_hdw *hdw)
 {
 	int result;
+	/* 1346cc3@@@DEADLOCK@@@91147@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@ctl_lock_mutex */
 	LOCK_TAKE(hdw->ctl_lock); do {
 		hdw->cmd_buffer[0] = FX2CMD_GET_USB_SPEED;
 		result = pvr2_send_request(hdw,
@@ -3291,6 +3301,7 @@ int pvr2_hdw_is_hsm(struct pvr2_hdw *hdw)
 /* Execute poll of tuner status */
 void pvr2_hdw_execute_tuner_poll(struct pvr2_hdw *hdw)
 {
+	/* 1e24f94@@@DEADLOCK@@@91527@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@big_lock_mutex */
 	LOCK_TAKE(hdw->big_lock); do {
 		pvr2_hdw_status_poll(hdw);
 	} while (0); LOCK_GIVE(hdw->big_lock);
@@ -3314,6 +3325,7 @@ static int pvr2_hdw_check_cropcap(struct pvr2_hdw *hdw)
 int pvr2_hdw_get_cropcap(struct pvr2_hdw *hdw, struct v4l2_cropcap *pp)
 {
 	int stat = 0;
+	/* 1346d55@@@DEADLOCK@@@91963@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@big_lock_mutex */
 	LOCK_TAKE(hdw->big_lock);
 	stat = pvr2_hdw_check_cropcap(hdw);
 	if (!stat) {
@@ -3327,6 +3339,7 @@ int pvr2_hdw_get_cropcap(struct pvr2_hdw *hdw, struct v4l2_cropcap *pp)
 /* Return information about the tuner */
 int pvr2_hdw_get_tuner_status(struct pvr2_hdw *hdw,struct v4l2_tuner *vtp)
 {
+	/* 1e24fe2@@@DEADLOCK@@@92268@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@big_lock_mutex */
 	LOCK_TAKE(hdw->big_lock); do {
 		if (hdw->tuner_signal_stale) {
 			pvr2_hdw_status_poll(hdw);
@@ -3347,6 +3360,7 @@ struct pvr2_stream *pvr2_hdw_get_video_stream(struct pvr2_hdw *hp)
 void pvr2_hdw_trigger_module_log(struct pvr2_hdw *hdw)
 {
 	int nr = pvr2_hdw_get_unit_number(hdw);
+	/* 1e25008@@@DEADLOCK@@@92722@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@big_lock_mutex */
 	LOCK_TAKE(hdw->big_lock); do {
 		printk(KERN_INFO "pvrusb2: =================  START STATUS CARD #%d  =================\n", nr);
 		v4l2_device_call_all(&hdw->v4l2_dev, 0, core, log_status);
@@ -3440,6 +3454,7 @@ void pvr2_hdw_cpufw_set_enabled(struct pvr2_hdw *hdw,
 	int ret;
 	u16 address;
 	unsigned int pipe;
+	/* 1e2510b@@@DEADLOCK@@@95489@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@big_lock_mutex */
 	LOCK_TAKE(hdw->big_lock); do {
 		if ((hdw->fw_buffer == NULL) == !enable_flag) break;
 
@@ -3519,6 +3534,7 @@ int pvr2_hdw_cpufw_get(struct pvr2_hdw *hdw,unsigned int offs,
 		       char *buf,unsigned int cnt)
 {
 	int ret = -EINVAL;
+	/* 1e251e1@@@DEADLOCK@@@97572@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@big_lock_mutex */
 	LOCK_TAKE(hdw->big_lock); do {
 		if (!buf) break;
 		if (!cnt) break;
@@ -3853,6 +3869,7 @@ static int pvr2_issue_simple_cmd(struct pvr2_hdw *hdw,u32 cmdcode)
 	int ret;
 	unsigned int cnt = 1;
 	unsigned int args = 0;
+	/* 1e25423@@@DEADLOCK@@@106051@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@ctl_lock_mutex */
 	LOCK_TAKE(hdw->ctl_lock);
 	hdw->cmd_buffer[0] = cmdcode & 0xffu;
 	args = (cmdcode >> 8) & 0xffu;
@@ -3912,6 +3929,7 @@ int pvr2_write_register(struct pvr2_hdw *hdw, u16 reg, u32 data)
 {
 	int ret;
 
+	/* 1e2549e@@@DEADLOCK@@@107409@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@ctl_lock_mutex */
 	LOCK_TAKE(hdw->ctl_lock);
 
 	hdw->cmd_buffer[0] = FX2CMD_REG_WRITE;  /* write register prefix */
@@ -3933,6 +3951,7 @@ static int pvr2_read_register(struct pvr2_hdw *hdw, u16 reg, u32 *data)
 {
 	int ret = 0;
 
+	/* 1e254d5@@@DEADLOCK@@@107858@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@ctl_lock_mutex */
 	LOCK_TAKE(hdw->ctl_lock);
 
 	hdw->cmd_buffer[0] = FX2CMD_REG_READ;  /* read register prefix */
@@ -4880,6 +4899,7 @@ unsigned int pvr2_hdw_state_report(struct pvr2_hdw *hdw,
 {
 	unsigned int bcnt,ccnt,idx;
 	bcnt = 0;
+	/* 1347d83@@@DEADLOCK@@@134131@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@big_lock_mutex */
 	LOCK_TAKE(hdw->big_lock);
 	for (idx = 0; ; idx++) {
 		ccnt = pvr2_hdw_report_unlocked(hdw,idx,buf,acnt);
@@ -5118,6 +5138,7 @@ int pvr2_hdw_set_input_allowed(struct pvr2_hdw *hdw,
 {
 	int ret = 0;
 	unsigned int nv,m,idx;
+	/* 1e25ac5@@@DEADLOCK@@@140327@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@big_lock_mutex */
 	LOCK_TAKE(hdw->big_lock);
 	do {
 		nv = hdw->input_allowed_mask & ~change_mask;
@@ -5156,6 +5177,7 @@ int pvr2_hdw_set_input_allowed(struct pvr2_hdw *hdw,
 static int pvr2_hdw_get_eeprom_addr(struct pvr2_hdw *hdw)
 {
 	int result;
+	/* 1e25b1a@@@DEADLOCK@@@141227@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-hdw.c@@@ctl_lock_mutex */
 	LOCK_TAKE(hdw->ctl_lock); do {
 		hdw->cmd_buffer[0] = FX2CMD_GET_EEPROM_ADDR;
 		result = pvr2_send_request(hdw,
diff --git a/drivers/media/usb/pvrusb2/pvrusb2-i2c-core.c b/drivers/media/usb/pvrusb2/pvrusb2-i2c-core.c
index b5e929f1bf82..28e9d62881d4 100644
--- a/drivers/media/usb/pvrusb2/pvrusb2-i2c-core.c
+++ b/drivers/media/usb/pvrusb2/pvrusb2-i2c-core.c
@@ -69,6 +69,7 @@ static int pvr2_i2c_write(struct pvr2_hdw *hdw, /* Context */
 		return -ENOTSUPP;
 	}
 
+	/* 135d20a@@@DEADLOCK@@@2239@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-i2c-core.c@@@ctl_lock_mutex */
 	LOCK_TAKE(hdw->ctl_lock);
 
 	/* Clear the command buffer (likely to be paranoia) */
@@ -131,6 +132,7 @@ static int pvr2_i2c_read(struct pvr2_hdw *hdw, /* Context */
 		return -ENOTSUPP;
 	}
 
+	/* 1e31ded@@@DEADLOCK@@@3985@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-i2c-core.c@@@ctl_lock_mutex */
 	LOCK_TAKE(hdw->ctl_lock);
 
 	/* Clear the command buffer (likely to be paranoia) */
@@ -229,6 +231,7 @@ static int i2c_24xxx_ir(struct pvr2_hdw *hdw,
 	}
 
 	/* Issue a command to the FX2 to read the IR receiver. */
+	/* 135d375@@@DEADLOCK@@@6775@@@24@@@drivers/media/usb/pvrusb2/pvrusb2-i2c-core.c@@@ctl_lock_mutex */
 	LOCK_TAKE(hdw->ctl_lock); do {
 		hdw->cmd_buffer[0] = FX2CMD_GET_IR_CODE;
 		stat = pvr2_send_request(hdw,
diff --git a/drivers/message/fusion/mptctl.c b/drivers/message/fusion/mptctl.c
index b0a892a2bf1b..cc70ea9f7847 100644
--- a/drivers/message/fusion/mptctl.c
+++ b/drivers/message/fusion/mptctl.c
@@ -181,9 +181,11 @@ mptctl_syscall_down(MPT_ADAPTER *ioc, int nonblock)
 	int rc = 0;
 
 	if (nonblock) {
+		if (/* 15b3b8f@@@DEADLOCK@@@6731@@@38@@@drivers/message/fusion/mptctl.c@@@mutex */
 		if (!mutex_trylock(&ioc->ioctl_cmds.mutex))
 			rc = -EAGAIN;
 	} else {
+		if (/* 1f93823@@@DEADLOCK@@@6804@@@48@@@drivers/message/fusion/mptctl.c@@@mutex */
 		if (mutex_lock_interruptible(&ioc->ioctl_cmds.mutex))
 			rc = -ERESTARTSYS;
 	}
diff --git a/drivers/mtd/chips/cfi_cmdset_0001.c b/drivers/mtd/chips/cfi_cmdset_0001.c
index a7543ba3e190..68723bbdabfa 100644
--- a/drivers/mtd/chips/cfi_cmdset_0001.c
+++ b/drivers/mtd/chips/cfi_cmdset_0001.c
@@ -930,6 +930,7 @@ static int get_chip(struct map_info *map, struct flchip *chip, unsigned long adr
 			 * it'll happily send us to sleep.  In any case, when
 			 * get_chip returns success we're clear to go ahead.
 			 */
+			/* 1aa730a@@@DEADLOCK@@@30569@@@39@@@drivers/mtd/chips/cfi_cmdset_0001.c@@@mutex */
 			ret = mutex_trylock(&contender->mutex);
 			mutex_unlock(&shared->lock);
 			if (!ret)
diff --git a/drivers/mtd/lpddr/lpddr_cmds.c b/drivers/mtd/lpddr/lpddr_cmds.c
index 018c75faadb3..ae4dc8a27d11 100644
--- a/drivers/mtd/lpddr/lpddr_cmds.c
+++ b/drivers/mtd/lpddr/lpddr_cmds.c
@@ -326,6 +326,7 @@ sleep:
 		mutex_unlock(&chip->mutex);
 		schedule();
 		remove_wait_queue(&chip->wq, &wait);
+		/* 1b0b14f@@@DEADLOCK@@@9732@@@25@@@drivers/mtd/lpddr/lpddr_cmds.c@@@mutex */
 		mutex_lock(&chip->mutex);
 		return -EAGAIN;
 	}
diff --git a/drivers/nfc/nfcsim.c b/drivers/nfc/nfcsim.c
index 93111fa8d282..0d2ca78ac0f6 100644
--- a/drivers/nfc/nfcsim.c
+++ b/drivers/nfc/nfcsim.c
@@ -391,6 +391,7 @@ static void nfcsim_wq_poll(struct work_struct *work)
 	/* These work items run on an ordered workqueue and are therefore
 	 * serialized. So we can take both mutexes without being dead locked.
 	 */
+	/* 115e2b0@@@DEADLOCK@@@8642@@@23@@@drivers/nfc/nfcsim.c@@@lock */
 	mutex_lock(&dev->lock);
 	mutex_lock(&peer->lock);
 
diff --git a/drivers/platform/goldfish/goldfish_pipe.c b/drivers/platform/goldfish/goldfish_pipe.c
index d9a09d9637d9..48fd29b8e22b 100644
--- a/drivers/platform/goldfish/goldfish_pipe.c
+++ b/drivers/platform/goldfish/goldfish_pipe.c
@@ -386,6 +386,7 @@ static ssize_t goldfish_pipe_read_write(struct file *filp, char __user *buffer,
 		}
 
 		/* Try to re-acquire the lock */
+		if (/* 123615a@@@DEADLOCK@@@11902@@@37@@@drivers/platform/goldfish/goldfish_pipe.c@@@lock */
 		if (mutex_lock_interruptible(&pipe->lock))
 			return -ERESTARTSYS;
 
diff --git a/drivers/platform/x86/thinkpad_acpi.c b/drivers/platform/x86/thinkpad_acpi.c
index 3bbc6eb60de5..576993645b10 100644
--- a/drivers/platform/x86/thinkpad_acpi.c
+++ b/drivers/platform/x86/thinkpad_acpi.c
@@ -2200,6 +2200,7 @@ static int tpacpi_hotkey_driver_mask_set(const u32 mask)
 
 	mutex_lock(&hotkey_mutex);
 
+	/* 12880a1@@@DEADLOCK@@@59329@@@28@@@drivers/platform/x86/thinkpad_acpi.c@@@hotkey_thread_data_mutex */
 	HOTKEY_CONFIG_CRITICAL_START
 	hotkey_driver_mask = mask;
 #ifdef CONFIG_THINKPAD_ACPI_HOTKEY_POLL
@@ -2765,6 +2766,7 @@ static ssize_t hotkey_source_mask_store(struct device *dev,
 	if (mutex_lock_killable(&hotkey_mutex))
 		return -ERESTARTSYS;
 
+	/* 12882e4@@@DEADLOCK@@@74483@@@28@@@drivers/platform/x86/thinkpad_acpi.c@@@hotkey_thread_data_mutex */
 	HOTKEY_CONFIG_CRITICAL_START
 	hotkey_source_mask = t;
 	HOTKEY_CONFIG_CRITICAL_END
diff --git a/drivers/scsi/libfc/fc_npiv.c b/drivers/scsi/libfc/fc_npiv.c
index 9fbf78ed821b..6c86474802c5 100644
--- a/drivers/scsi/libfc/fc_npiv.c
+++ b/drivers/scsi/libfc/fc_npiv.c
@@ -132,6 +132,7 @@ void fc_vport_setlink(struct fc_lport *vn_port)
 	struct Scsi_Host *shost = vport_to_shost(vport);
 	struct fc_lport *n_port = shost_priv(shost);
 
+	/* 1976aa2@@@DEADLOCK@@@3714@@@30@@@drivers/scsi/libfc/fc_npiv.c@@@lp_mutex */
 	mutex_lock(&n_port->lp_mutex);
 	mutex_lock_nested(&vn_port->lp_mutex, LPORT_MUTEX_VN_PORT);
 	__fc_vport_setlink(n_port, vn_port);
diff --git a/drivers/scsi/mpt2sas/mpt2sas_scsih.c b/drivers/scsi/mpt2sas/mpt2sas_scsih.c
index dd461015813f..8883e2663da8 100644
--- a/drivers/scsi/mpt2sas/mpt2sas_scsih.c
+++ b/drivers/scsi/mpt2sas/mpt2sas_scsih.c
@@ -2393,6 +2393,7 @@ mpt2sas_scsih_issue_tm(struct MPT2SAS_ADAPTER *ioc, u16 handle, uint channel,
 	int rc;
 
 	if (m_type == TM_MUTEX_ON)
+		/* 1773558@@@DEADLOCK@@@68806@@@32@@@drivers/scsi/mpt2sas/mpt2sas_scsih.c@@@mutex */
 		mutex_lock(&ioc->tm_cmds.mutex);
 	if (ioc->tm_cmds.status != MPT2_CMD_NOT_USED) {
 		printk(MPT2SAS_INFO_FMT "%s: tm_cmd busy!!!\n",
diff --git a/drivers/scsi/mpt3sas/mpt3sas_scsih.c b/drivers/scsi/mpt3sas/mpt3sas_scsih.c
index 135f12c20ecf..e369103dae81 100644
--- a/drivers/scsi/mpt3sas/mpt3sas_scsih.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_scsih.c
@@ -2054,6 +2054,7 @@ mpt3sas_scsih_issue_tm(struct MPT3SAS_ADAPTER *ioc, u16 handle, uint channel,
 	int rc;
 
 	if (m_type == TM_MUTEX_ON)
+		/* 179ec5e@@@DEADLOCK@@@57231@@@32@@@drivers/scsi/mpt3sas/mpt3sas_scsih.c@@@mutex */
 		mutex_lock(&ioc->tm_cmds.mutex);
 	if (ioc->tm_cmds.status != MPT3_CMD_NOT_USED) {
 		pr_info(MPT3SAS_FMT "%s: tm_cmd busy!!!\n",
diff --git a/drivers/staging/lustre/lustre/fid/fid_request.c b/drivers/staging/lustre/lustre/fid/fid_request.c
index 992d07591b08..3481e1a7f6df 100644
--- a/drivers/staging/lustre/lustre/fid/fid_request.c
+++ b/drivers/staging/lustre/lustre/fid/fid_request.c
@@ -227,6 +227,7 @@ static int seq_fid_alloc_prep(struct lu_client_seq *seq,
 
 		schedule();
 
+		/* 14f57e2@@@DEADLOCK@@@6355@@@28@@@drivers/staging/lustre/lustre/fid/fid_request.c@@@lcs_mutex */
 		mutex_lock(&seq->lcs_mutex);
 		remove_wait_queue(&seq->lcs_waitq, link);
 		set_current_state(TASK_RUNNING);
diff --git a/drivers/staging/lustre/lustre/llite/dir.c b/drivers/staging/lustre/lustre/llite/dir.c
index efa2faf080d7..ecdbfb5e5da6 100644
--- a/drivers/staging/lustre/lustre/llite/dir.c
+++ b/drivers/staging/lustre/lustre/llite/dir.c
@@ -393,6 +393,7 @@ struct page *ll_get_dir_page(struct inode *dir, __u64 hash,
 	}
 	ldlm_lock_dump_handle(D_OTHER, &lockh);
 
+	/* 1620092@@@DEADLOCK@@@12405@@@36@@@drivers/staging/lustre/lustre/llite/dir.c@@@d_readdir_mutex */
 	mutex_lock(&lli->lli_readdir_mutex);
 	page = ll_dir_page_locate(dir, &lhash, &start, &end);
 	if (IS_ERR(page)) {
diff --git a/drivers/staging/lustre/lustre/obdclass/local_storage.c b/drivers/staging/lustre/lustre/obdclass/local_storage.c
index 78190225ac7a..e20eb7b0e593 100644
--- a/drivers/staging/lustre/lustre/obdclass/local_storage.c
+++ b/drivers/staging/lustre/lustre/obdclass/local_storage.c
@@ -755,6 +755,7 @@ int local_oid_storage_init(const struct lu_env *env, struct dt_device *dev,
 	if (IS_ERR(ls))
 		return PTR_ERR(ls);
 
+	/* 12b61f@@@DEADLOCK@@@19396@@@30@@@drivers/staging/lustre/lustre/obdclass/local_storage.c@@@ls_los_mutex */
 	mutex_lock(&ls->ls_los_mutex);
 	*los = dt_los_find(ls, fid_seq(first_fid));
 	if (*los != NULL)
diff --git a/drivers/tty/moxa.c b/drivers/tty/moxa.c
index 1deaca4674e4..916547e493a0 100644
--- a/drivers/tty/moxa.c
+++ b/drivers/tty/moxa.c
@@ -906,6 +906,7 @@ static void moxa_board_deinit(struct moxa_board_conf *brd)
 {
 	unsigned int a, opened, first_idx;
 
+	/* 1f85e7@@@DEADLOCK@@@23212@@@27@@@drivers/tty/moxa.c@@@moxa_openlock */
 	mutex_lock(&moxa_openlock);
 	spin_lock_bh(&moxa_lock);
 	brd->ready = 0;
